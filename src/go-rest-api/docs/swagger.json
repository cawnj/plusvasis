{
    "schemes": [
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "API backend for PlusVasis service",
        "title": "PlusVasis API",
        "contact": {},
        "version": "1.0"
    },
    "host": "api.plusvasis.xyz",
    "paths": {
        "/job/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details of a Nomad job",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nomad"
                ],
                "summary": "ReadJob",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.JobListStub"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing Nomad job",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nomad"
                ],
                "summary": "UpdateJob",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Nomad Job",
                        "name": "job",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/plusvasis_internal_templates.NomadJob"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.JobRegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Stop a running Nomad job",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nomad"
                ],
                "summary": "StopJob",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Purge job",
                        "name": "purge",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.JobDeregisterResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/job/{id}/exec": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Execute commands in a Nomad job allocation via WebSockets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "proxy"
                ],
                "summary": "AllocExec",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Allocation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Command to execute",
                        "name": "command",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    },
                    "502": {
                        "description": "Bad Gateway"
                    }
                }
            }
        },
        "/job/{id}/logs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Stream logs from a Nomad job allocation",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "proxy"
                ],
                "summary": "StreamLogs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Task name (same as job name)",
                        "name": "task",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Log type (stdout or stderr)",
                        "name": "type",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/job/{id}/restart": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Restart a Nomad job",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nomad"
                ],
                "summary": "RestartJob",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.GenericResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/job/{id}/start": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Start a stopped Nomad job",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nomad"
                ],
                "summary": "StartJob",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.JobRegisterResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/jobs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details of all Nomad jobs",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nomad"
                ],
                "summary": "GetJobs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/structs.JobListStub"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new Nomad job",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "nomad"
                ],
                "summary": "CreateJob",
                "parameters": [
                    {
                        "description": "Nomad Job",
                        "name": "job",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/plusvasis_internal_templates.NomadJob"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structs.JobRegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "echo.HTTPError": {
            "type": "object",
            "properties": {
                "message": {}
            }
        },
        "plusvasis_internal_templates.NomadJob": {
            "type": "object",
            "required": [
                "containerName",
                "dockerImage",
                "shell",
                "user"
            ],
            "properties": {
                "containerName": {
                    "type": "string"
                },
                "cpu": {
                    "type": "integer",
                    "maximum": 1000,
                    "minimum": 0
                },
                "dockerImage": {
                    "type": "string"
                },
                "env": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "envString": {
                    "type": "string"
                },
                "expose": {
                    "type": "boolean"
                },
                "memory": {
                    "type": "integer",
                    "maximum": 2000,
                    "minimum": 0
                },
                "port": {
                    "type": "integer",
                    "maximum": 65535,
                    "minimum": 0
                },
                "shell": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "structs.GenericResponse": {
            "type": "object",
            "properties": {
                "index": {
                    "description": "This is the index associated with the write",
                    "type": "integer"
                }
            }
        },
        "structs.JobChildrenSummary": {
            "type": "object",
            "properties": {
                "dead": {
                    "type": "integer"
                },
                "pending": {
                    "type": "integer"
                },
                "running": {
                    "type": "integer"
                }
            }
        },
        "structs.JobDeregisterResponse": {
            "type": "object",
            "properties": {
                "evalCreateIndex": {
                    "type": "integer"
                },
                "evalID": {
                    "type": "string"
                },
                "index": {
                    "description": "This is the index associated with the read",
                    "type": "integer"
                },
                "jobModifyIndex": {
                    "type": "integer"
                },
                "knownLeader": {
                    "description": "Used to indicate if there is a known leader node",
                    "type": "boolean"
                },
                "lastContact": {
                    "description": "If AllowStale is used, this is time elapsed since\nlast contact between the follower and leader. This\ncan be used to gauge staleness.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/time.Duration"
                        }
                    ]
                },
                "nextToken": {
                    "description": "NextToken is the token returned with queries that support\npaginated lists. To resume paging from this point, pass\nthis token in the next request's QueryOptions.",
                    "type": "string"
                },
                "volumeEvalID": {
                    "type": "string"
                },
                "volumeEvalIndex": {
                    "type": "integer"
                }
            }
        },
        "structs.JobListStub": {
            "type": "object",
            "properties": {
                "createIndex": {
                    "type": "integer"
                },
                "datacenters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "jobModifyIndex": {
                    "type": "integer"
                },
                "jobSummary": {
                    "$ref": "#/definitions/structs.JobSummary"
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "modifyIndex": {
                    "type": "integer"
                },
                "multiregion": {
                    "$ref": "#/definitions/structs.Multiregion"
                },
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                },
                "parameterizedJob": {
                    "type": "boolean"
                },
                "parentID": {
                    "type": "string"
                },
                "periodic": {
                    "type": "boolean"
                },
                "priority": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "statusDescription": {
                    "type": "string"
                },
                "stop": {
                    "type": "boolean"
                },
                "submitTime": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "structs.JobRegisterResponse": {
            "type": "object",
            "properties": {
                "evalCreateIndex": {
                    "type": "integer"
                },
                "evalID": {
                    "type": "string"
                },
                "index": {
                    "description": "This is the index associated with the read",
                    "type": "integer"
                },
                "jobModifyIndex": {
                    "type": "integer"
                },
                "knownLeader": {
                    "description": "Used to indicate if there is a known leader node",
                    "type": "boolean"
                },
                "lastContact": {
                    "description": "If AllowStale is used, this is time elapsed since\nlast contact between the follower and leader. This\ncan be used to gauge staleness.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/time.Duration"
                        }
                    ]
                },
                "nextToken": {
                    "description": "NextToken is the token returned with queries that support\npaginated lists. To resume paging from this point, pass\nthis token in the next request's QueryOptions.",
                    "type": "string"
                },
                "warnings": {
                    "description": "Warnings contains any warnings about the given job. These may include\ndeprecation warnings.",
                    "type": "string"
                }
            }
        },
        "structs.JobSummary": {
            "type": "object",
            "properties": {
                "children": {
                    "description": "Children contains a summary for the children of this job.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/structs.JobChildrenSummary"
                        }
                    ]
                },
                "createIndex": {
                    "description": "Raft Indexes",
                    "type": "integer"
                },
                "jobID": {
                    "description": "JobID is the ID of the job the summary is for",
                    "type": "string"
                },
                "modifyIndex": {
                    "type": "integer"
                },
                "namespace": {
                    "description": "Namespace is the namespace of the job and its summary",
                    "type": "string"
                },
                "summary": {
                    "description": "Summary contains the summary per task group for the Job",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/structs.TaskGroupSummary"
                    }
                }
            }
        },
        "structs.Multiregion": {
            "type": "object",
            "properties": {
                "regions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/structs.MultiregionRegion"
                    }
                },
                "strategy": {
                    "$ref": "#/definitions/structs.MultiregionStrategy"
                }
            }
        },
        "structs.MultiregionRegion": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                },
                "datacenters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "meta": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "structs.MultiregionStrategy": {
            "type": "object",
            "properties": {
                "maxParallel": {
                    "type": "integer"
                },
                "onFailure": {
                    "type": "string"
                }
            }
        },
        "structs.TaskGroupSummary": {
            "type": "object",
            "properties": {
                "complete": {
                    "type": "integer"
                },
                "failed": {
                    "type": "integer"
                },
                "lost": {
                    "type": "integer"
                },
                "queued": {
                    "type": "integer"
                },
                "running": {
                    "type": "integer"
                },
                "starting": {
                    "type": "integer"
                },
                "unknown": {
                    "type": "integer"
                }
            }
        },
        "time.Duration": {
            "type": "integer",
            "enum": [
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000
            ],
            "x-enum-varnames": [
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour"
            ]
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}